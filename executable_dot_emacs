;; Config for emacs editor
(require 'package)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))

;; Get Evil
(unless (package-installed-p 'evil)
  (package-install 'evil))
(require 'evil)
(evil-mode 1)
(evil-set-leader 'motion (kbd "SPC"))

;; Get markdown
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
         ("C-c C-e" . markdown-do)))

;; Get dirvish
(unless (package-installed-p 'dirvish)
  (package-install 'dirvish))
(dirvish-override-dired-mode)
(defun me/pv ()
  (interactive)
  (dired "."))
(evil-define-key 'normal 'global (kbd "<leader>pv") 'me/pv)

(defun me/pc ()
  (interactive)
  (dired "/sudo::/etc"))
(evil-define-key 'normal 'global (kbd "<leader>pc") 'me/pc)

(defun me/cc ()
  (interactive)
  (compile))
(evil-define-key 'normal 'global (kbd "<leader>cc") 'me/cc)

;; Get Doom-themes
;; (unless (package-installed-p 'doom-themes)
;;   (package-install 'doom-themes))
;; (use-package doom-themes
;;   :ensure t
;;   :config
;;   (setq doom-themes-enable-bold t
;; 	doom-themes-enable-italic t)
;;   (load-theme 'doom-solarized-dark-high-contrast t))

(use-package kanagawa-themes
  :ensure t
  :config
  (load-theme 'kanagawa-dragon t))
;; Get org-modern
(with-eval-after-load 'org (global-org-modern-mode))

;; Auto TreeSitter
(unless (package-installed-p 'treesit-auto)
  (package-install 'treesit-auto))

;; Get TreeSitter
(require 'treesit)
(treesit-available-p)
(setq treesit-extra-load-path '("/home/savvy/.emacs.d/tree-sitter"))

(setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (c3 "https://github.com/c3lang/tree-sitter-c3")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (elvish "https://github.com/elves/tree-sitter-elvish")
     (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
     (lua "https://github.com/tjdevries/tree-sitter-lua")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

;;C3 mode
(add-to-list 'load-path "/home/savvy/.emacs.d/c3-ts-mode")
(require 'c3-ts-mode)
(setq c3-ts-mode-indent-offset 2
      treesit-font-lock-level 4)

(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

;; Eglot
(require 'eglot)
(use-package eglot
  :ensure t)
(add-hook 'rust-ts-mode-hook 'eglot-ensure)

;; Get completion
(add-hook 'after-init-hook 'global-company-mode)

;; Set proper caching
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying      t  ; Don't de-link hard links
      version-control        t  ; Use version numbers on backups
      delete-old-versions    t  ; Automatically delete excess backups:
      kept-new-versions      20 ; how many of the newest versions to keep
      kept-old-versions      5) ; and how many of the old

;;Personal mode changes
(menu-bar-mode 0)
(tool-bar-mode 0)
(global-display-line-numbers-mode)
(setq inhibit-startup-screen t)
;(defun display-startup-echo-area-message ()
;  (message nil)
;  )
;; Custom vars from plugins
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auth-source-save-behavior nil)
 '(display-line-numbers-type 'relative)
 '(package-selected-packages
   '(meson-mode company lua-mode haskell-mode kanagawa-themes dirvish elvish-mode org-modern evil)))
(custom-set-faces
 (set-face-background 'default "unspecified-bg")
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

